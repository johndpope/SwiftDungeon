// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file BaseMessage.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: BaseMessage, rhs: BaseMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal struct BaseMessageRoot {
  internal static var sharedInstance : BaseMessageRoot {
   struct Static {
       static let instance : BaseMessageRoot = BaseMessageRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class BaseMessage : GeneratedMessage, GeneratedMessageProtocol {


    //Enum type declaration start 

    internal enum Types:Int32 {
      case StartBattle = 0
      case EndBattle = 1
      case EndTurn = 2
      case MoveToActiveCharacter = 3
      case UseAbility = 4

    }

    //Enum type declaration end 

  private(set) var types:BaseMessage.Types = BaseMessage.Types.StartBattle
  private(set) var hasTypes:Bool = false
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasTypes {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasTypes {
      try output.writeEnum(1, value:types.rawValue)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if (hasTypes) {
      serialize_size += types.rawValue.computeEnumSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<BaseMessage> {
    var mergedArray = Array<BaseMessage>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> BaseMessage? {
    return try BaseMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromData(data, extensionRegistry:BaseMessageRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMessage {
    return try BaseMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> BaseMessage.Builder {
    return BaseMessage.classBuilder() as! BaseMessage.Builder
  }
  internal func getBuilder() -> BaseMessage.Builder {
    return classBuilder() as! BaseMessage.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return BaseMessage.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return BaseMessage.Builder()
  }
  internal func toBuilder() throws -> BaseMessage.Builder {
    return try BaseMessage.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:BaseMessage) throws -> BaseMessage.Builder {
    return try BaseMessage.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if (hasTypes) {
      output += "\(indent) types: \(types.rawValue)\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTypes {
             hashCode = (hashCode &* 31) &+ Int(types.rawValue)
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "BaseMessage"
  }
  override internal func className() -> String {
      return "BaseMessage"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return BaseMessage.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:BaseMessage = BaseMessage()
    internal func getMessage() -> BaseMessage {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
      var hasTypes:Bool{
          get {
              return builderResult.hasTypes
          }
      }
      var types:BaseMessage.Types {
          get {
              return builderResult.types
          }
          set (value) {
              builderResult.hasTypes = true
              builderResult.types = value
          }
      }
      internal func setTypes(value:BaseMessage.Types) -> BaseMessage.Builder {
        self.types = value
        return self
      }
      internal func clearTypes() -> BaseMessage.Builder {
         builderResult.hasTypes = false
         builderResult.types = .StartBattle
         return self
      }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> BaseMessage.Builder {
      builderResult = BaseMessage()
      return self
    }
    internal override func clone() throws -> BaseMessage.Builder {
      return try BaseMessage.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> BaseMessage {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> BaseMessage {
      let returnMe:BaseMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:BaseMessage) throws -> BaseMessage.Builder {
      if other == BaseMessage() {
       return self
      }
      if other.hasTypes {
           types = other.types
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> BaseMessage.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> BaseMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          let valueInttypes = try input.readEnum()
          if let enumstypes = BaseMessage.Types(rawValue:valueInttypes){
               types = enumstypes
          } else {
               try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInttypes))
          }

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)

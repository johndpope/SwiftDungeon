// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file StartBattleMessage.proto

import Foundation
import ProtocolBuffers


internal func == (lhs: StartBattleMessage, rhs: StartBattleMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBase == rhs.hasBase) && (!lhs.hasBase || lhs.base == rhs.base)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

internal struct StartBattleMessageRoot {
  internal static var sharedInstance : StartBattleMessageRoot {
   struct Static {
       static let instance : StartBattleMessageRoot = StartBattleMessageRoot()
   }
   return Static.instance
  }
  internal var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    BaseMessageRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final internal class StartBattleMessage : GeneratedMessage, GeneratedMessageProtocol {
  private(set) var hasBase:Bool = false
  private(set) var base:BaseMessage!
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasBase {
      return false
    }
    if !base.isInitialized() {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasBase {
      try output.writeMessage(1, value:base)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasBase {
        if let varSizebase = base?.computeMessageSize(1) {
            serialize_size += varSizebase
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  internal class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<StartBattleMessage> {
    var mergedArray = Array<StartBattleMessage>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  internal class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> StartBattleMessage? {
    return try StartBattleMessage.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  internal class func parseFromData(data:NSData) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromData(data, extensionRegistry:StartBattleMessageRoot.sharedInstance.extensionRegistry).build()
  }
  internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> StartBattleMessage {
    return try StartBattleMessage.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func getBuilder() -> StartBattleMessage.Builder {
    return StartBattleMessage.classBuilder() as! StartBattleMessage.Builder
  }
  internal func getBuilder() -> StartBattleMessage.Builder {
    return classBuilder() as! StartBattleMessage.Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return StartBattleMessage.Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return StartBattleMessage.Builder()
  }
  internal func toBuilder() throws -> StartBattleMessage.Builder {
    return try StartBattleMessage.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:StartBattleMessage) throws -> StartBattleMessage.Builder {
    return try StartBattleMessage.Builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) throws {
    if hasBase {
      output += "\(indent) base {\n"
      try base?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasBase {
              if let hashValuebase = base?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuebase
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "StartBattleMessage"
  }
  override internal func className() -> String {
      return "StartBattleMessage"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return StartBattleMessage.self
  }
  //Meta information declaration end

  final internal class Builder : GeneratedMessageBuilder {
    private var builderResult:StartBattleMessage = StartBattleMessage()
    internal func getMessage() -> StartBattleMessage {
        return builderResult
    }

    required override internal init () {
       super.init()
    }
    var hasBase:Bool {
         get {
             return builderResult.hasBase
         }
    }
    var base:BaseMessage! {
         get {
             if baseBuilder_ != nil {
                builderResult.base = baseBuilder_.getMessage()
             }
             return builderResult.base
         }
         set (value) {
             builderResult.hasBase = true
             builderResult.base = value
         }
    }
    private var baseBuilder_:BaseMessage.Builder! {
         didSet {
            builderResult.hasBase = true
         }
    }
    internal func getBaseBuilder() -> BaseMessage.Builder {
      if baseBuilder_ == nil {
         baseBuilder_ = BaseMessage.Builder()
         builderResult.base = baseBuilder_.getMessage()
         if base != nil {
            try! baseBuilder_.mergeFrom(base)
         }
      }
      return baseBuilder_
    }
    func setBase(value:BaseMessage!) -> StartBattleMessage.Builder {
      self.base = value
      return self
    }
    internal func mergeBase(value:BaseMessage) throws -> StartBattleMessage.Builder {
      if builderResult.hasBase {
        builderResult.base = try BaseMessage.builderWithPrototype(builderResult.base).mergeFrom(value).buildPartial()
      } else {
        builderResult.base = value
      }
      builderResult.hasBase = true
      return self
    }
    internal func clearBase() -> StartBattleMessage.Builder {
      baseBuilder_ = nil
      builderResult.hasBase = false
      builderResult.base = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> StartBattleMessage.Builder {
      builderResult = StartBattleMessage()
      return self
    }
    internal override func clone() throws -> StartBattleMessage.Builder {
      return try StartBattleMessage.builderWithPrototype(builderResult)
    }
    internal override func build() throws -> StartBattleMessage {
         try checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> StartBattleMessage {
      let returnMe:StartBattleMessage = builderResult
      return returnMe
    }
    internal func mergeFrom(other:StartBattleMessage) throws -> StartBattleMessage.Builder {
      if other == StartBattleMessage() {
       return self
      }
      if (other.hasBase) {
          try mergeBase(other.base)
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) throws -> StartBattleMessage.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> StartBattleMessage.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let tag = try input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          let subBuilder:BaseMessage.Builder = BaseMessage.Builder()
          if hasBase {
            try subBuilder.mergeFrom(base)
          }
          try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          base = subBuilder.buildPartial()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
